{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":7400278,"sourceType":"datasetVersion","datasetId":4302978},{"sourceId":7402726,"sourceType":"datasetVersion","datasetId":4304715}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/antoniojess/cryptonewssentiment?scriptVersionId=159379145\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# Noticias y sentimiento crypto","metadata":{}},{"cell_type":"markdown","source":"# Importar módulos","metadata":{}},{"cell_type":"code","source":"pip install langchain langchain_openai","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import os\nimport re\nimport warnings\nimport requests\nimport traceback\nfrom joblib import dump, load\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nfrom bs4 import BeautifulSoup\nfrom wordcloud import WordCloud\nfrom sqlalchemy import create_engine, text, MetaData, Table, Column, Date, Time, String, Float\nfrom sqlalchemy.exc import SQLAlchemyError\nfrom datetime import datetime as dt, timedelta as td\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import WordNetLemmatizer\nfrom sklearn.ensemble import GradientBoostingClassifier, AdaBoostClassifier\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\nfrom tensorflow import keras\nfrom keras.preprocessing.text import Tokenizer, tokenizer_from_json\nfrom tensorflow.keras.utils import pad_sequences\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Embedding, Conv1D, MaxPooling1D, Bidirectional, LSTM, Dense, Dropout, Input, Attention\nfrom tensorflow.keras.regularizers import l2\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom keras.models import load_model\nfrom textblob import TextBlob\nfrom scipy.sparse import hstack, coo_matrix\nfrom sklearn.metrics import jaccard_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom langchain.chains.combine_documents.stuff import StuffDocumentsChain\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.schema.document import Document\nfrom langchain.chains.llm import LLMChain\nfrom langchain.prompts import PromptTemplate\nfrom langchain_openai import ChatOpenAI\n\nnltk.download('punkt')\nnltk.download('averaged_perceptron_tagger')\nnltk.download('wordnet')\nnltk.download('stopwords')\nwarnings.filterwarnings(\"ignore\")\n# Descargar el recurso 'wordnet' (workaround)\nos.system('python3 -m nltk.downloader wordnet')\n# Descomprimir el recurso 'wordnet' manualmente\nos.system('unzip /usr/share/nltk_data/corpora/wordnet.zip -d /usr/share/nltk_data/corpora/')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Funciones","metadata":{}},{"cell_type":"markdown","source":"## Helpers","metadata":{}},{"cell_type":"code","source":"def get_read_file(directory, file):\n    kaggle_input_dir = '/kaggle/input'\n    archivo_ruta = os.path.join(kaggle_input_dir, directory, file)\n    with open(archivo_ruta, \"r\") as archivo:\n        content = archivo.read().strip()\n    return content","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.56607Z","iopub.execute_input":"2024-01-17T17:34:03.567157Z","iopub.status.idle":"2024-01-17T17:34:03.574469Z","shell.execute_reply.started":"2024-01-17T17:34:03.567095Z","shell.execute_reply":"2024-01-17T17:34:03.573021Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"def clean_text(text):\n    text = text.lower()\n    text = re.sub(r'[^\\w\\s]','', text)\n    text = text.strip()\n    text = \" \".join(text.split())\n    return text","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.578098Z","iopub.execute_input":"2024-01-17T17:34:03.578577Z","iopub.status.idle":"2024-01-17T17:34:03.58687Z","shell.execute_reply.started":"2024-01-17T17:34:03.578537Z","shell.execute_reply":"2024-01-17T17:34:03.585851Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":"## Noticias API de AlphaVantage","metadata":{}},{"cell_type":"code","source":"def get_alphavantage_data(url_params: str, fecha_desde: str, fecha_hasta: str) -> dict:\n    api_key = get_read_file(\"alpha_vantage_api.txt\")\n    # Url\n    url = f\"https://www.alphavantage.co/query?\"\n    url = f\"{url}{url_params}&time_from={fecha_desde}&time_to={fecha_hasta}&apikey={api_key}\"\n    # debug\n    #print(url)\n    # Solicitud\n    r = requests.get(url)\n    data = r.json()\n    # Retorna datos\n    return data","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.588426Z","iopub.execute_input":"2024-01-17T17:34:03.589272Z","iopub.status.idle":"2024-01-17T17:34:03.598195Z","shell.execute_reply.started":"2024-01-17T17:34:03.589229Z","shell.execute_reply":"2024-01-17T17:34:03.597173Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"class RateLimitExceededException(Exception):\n    pass\n\ndef get_news_sentiment(fecha_desde, fecha_ahora):\n    # Sentimiento de noticias\n    url_params = \"function=NEWS_SENTIMENT&tickers=CRYPTO:BTC&sort=EARLIEST&limit=1000\"\n    # Lista de noticias\n    rows_list = []\n    # Bucle que obtiene los datos\n    while fecha_desde.date() <= fecha_ahora.date():\n        fecha_desde = fecha_desde.replace(hour=0, minute=0, second=0, microsecond=0)\n        fecha_hasta = fecha_desde.replace(hour=23, minute=59, second=0, microsecond=0)\n        try:\n            # Obtener las noticias de ese rango temporal\n            data = get_alphavantage_data(url_params, fecha_desde.strftime(\"%Y%m%dT%H%M\"), fecha_hasta.strftime(\"%Y%m%dT%H%M\"))\n            if \"feed\" in data:\n                for feed in data[\"feed\"]:\n                    # Relleno el dataframe\n                    for ticker in feed[\"ticker_sentiment\"]:\n                        if ticker[\"ticker\"] == \"CRYPTO:BTC\":\n                            feed_row = {\n                                \"fecha\" : dt.strptime(feed[\"time_published\"], \"%Y%m%dT%H%M%S\").strftime(\"%Y-%m-%d\"),\n                                \"hora\" : dt.strptime(feed[\"time_published\"], \"%Y%m%dT%H%M%S\").strftime(\"%H:%M:%S\"),\n                                \"title\" : clean_text(feed[\"title\"]),\n                                \"summary\" : clean_text(feed[\"summary\"]),\n                                \"url\" : feed[\"url\"],\n                                \"relevance\" : float(ticker[\"relevance_score\"]),\n                                \"score\" : float(ticker[\"ticker_sentiment_score\"]),\n                                \"label\" : ticker[\"ticker_sentiment_label\"]\n                            }\n                            rows_list.append(feed_row)\n            elif \"Information\" in data:\n                raise RateLimitExceededException(data[\"Information\"])\n        except Exception as e:\n            traceback.print_exc()\n            break\n        fecha_desde += td(days=1)\n    # Lista de noticias a DataFrame\n    df_news = pd.DataFrame(rows_list, columns=[\"fecha\", \"hora\", \"title\", \"summary\", \"url\", \"relevance\", \"score\", \"label\"])\n    df_news[\"fecha\"] = pd.to_datetime(df_news[\"fecha\"], format=\"%Y-%m-%d\")\n    df_news[\"hora\"] = pd.to_datetime(df_news[\"hora\"], format=\"%H:%M:%S\")\n    df_news[\"relevance\"] = df_news[\"relevance\"].astype(float)\n    df_news[\"score\"] = df_news[\"score\"].astype(float)\n    # Retorna el dataframe\n    return df_news","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.600298Z","iopub.execute_input":"2024-01-17T17:34:03.601047Z","iopub.status.idle":"2024-01-17T17:34:03.620416Z","shell.execute_reply.started":"2024-01-17T17:34:03.601007Z","shell.execute_reply":"2024-01-17T17:34:03.619206Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":"## BBDD","metadata":{}},{"cell_type":"code","source":"def bbdd_conn(database):\n    # Parámetros de conexión a BBDD\n    server = '192.168.1.254'\n    database = database\n    username = 'sa'\n    password = get_read_file(\"bbdd_credential.txt\")\n    # Crear una conexión a la base de datos con sqlalchemy\n    engine = create_engine(f'mssql+pyodbc://{username}:{password}@{server}/{database}?driver=ODBC+Driver+18+for+SQL+Server&TrustServerCertificate=yes')\n    # retorna la conexión\n    return engine","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.621923Z","iopub.execute_input":"2024-01-17T17:34:03.622618Z","iopub.status.idle":"2024-01-17T17:34:03.636456Z","shell.execute_reply.started":"2024-01-17T17:34:03.622578Z","shell.execute_reply":"2024-01-17T17:34:03.635369Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"def crear_bbdd():\n    # Obtener la conexión a la base de datos\n    engine = bbdd_conn('master')\n    # Crear la base de datos y esquema\n    try:\n        with engine.connect() as conn:\n            conn.execution_options(isolation_level=\"AUTOCOMMIT\")\n            conn.execute(text(\"CREATE DATABASE cryptosentimiento;\"))\n    except Exception as e:\n        print(f\"{e}\")","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.638075Z","iopub.execute_input":"2024-01-17T17:34:03.638908Z","iopub.status.idle":"2024-01-17T17:34:03.653423Z","shell.execute_reply.started":"2024-01-17T17:34:03.638866Z","shell.execute_reply":"2024-01-17T17:34:03.651974Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"def crear_tabla():\n    # Conexión a la bbdd\n    engine = bbdd_conn('cryptosentimiento')\n    # Definir metadatos\n    metadata = MetaData()\n    # Definir la tabla\n    btc_table = Table(\n        'btc', metadata,\n        Column('fecha', Date, nullable=False),\n        Column('hora', Time, nullable=False),\n        Column('title', String, nullable=False),\n        Column('summary', String, nullable=False),\n        Column('url', String, nullable=False),\n        Column('relevance', Float, nullable=False),\n        Column('score', Float, nullable=False),\n        Column('label', String, nullable=False)\n    )\n    try:\n        # Crear tabla\n        metadata.create_all(engine, tables=[btc_table])\n    except SQLAlchemyError as e:\n        print(f\"{e}\")","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.655628Z","iopub.execute_input":"2024-01-17T17:34:03.656415Z","iopub.status.idle":"2024-01-17T17:34:03.66743Z","shell.execute_reply.started":"2024-01-17T17:34:03.656371Z","shell.execute_reply":"2024-01-17T17:34:03.666109Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"def insertar_nuevas_noticias(df):\n    engine = bbdd_conn('cryptosentimiento')\n    rows_inserted = 0\n    try:\n        with engine.begin() as conn:\n            # Consultamos las URLs existentes en la tabla\n            existing_urls = pd.read_sql(f\"SELECT url FROM btc\", con=conn)\n            # Filtramos el dataframe con las nuevas noticias\n            df_new = df[~df['url'].isin(existing_urls['url'])]\n            # Insertamos solo las noticias no existentes\n            if not df_new.empty:\n                df_new.to_sql('btc', con=conn, if_exists='append', index=False)\n                rows_inserted = len(df_new)\n    except Exception as e:\n        print(f\"{e}\")\n    return rows_inserted","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.671788Z","iopub.execute_input":"2024-01-17T17:34:03.67222Z","iopub.status.idle":"2024-01-17T17:34:03.6813Z","shell.execute_reply.started":"2024-01-17T17:34:03.672188Z","shell.execute_reply":"2024-01-17T17:34:03.680117Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"def fecha_ultima_noticia():\n    engine = bbdd_conn('cryptosentimiento')\n    # Se establece la fecha de la última noticia almacenada\n    query_fecha_desde = text(\"SELECT CONVERT(DATETIME, MAX(fecha)) AS fecha_desde FROM btc\")\n    with engine.connect() as connection:\n        result = connection.execute(query_fecha_desde).fetchone()\n        fecha_desde = result[0] if result else None\n    fecha_ahora = dt.utcnow().replace(second=0, microsecond=0)\n    if fecha_desde is not None:\n        if (fecha_ahora - fecha_desde).days > 1:\n            fecha_desde += td(days=1)\n    else:\n        fecha_desde = dt(year=2022, month=3, day=2)\n    return fecha_desde, fecha_ahora","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.683077Z","iopub.execute_input":"2024-01-17T17:34:03.683827Z","iopub.status.idle":"2024-01-17T17:34:03.696819Z","shell.execute_reply.started":"2024-01-17T17:34:03.683787Z","shell.execute_reply":"2024-01-17T17:34:03.695684Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"# Obtenemos las noticias e insertar en bbdd\ndef check_noticias():\n    fecha_desde, fecha_ahora = fecha_ultima_noticia()\n    df = get_news_sentiment(fecha_desde, fecha_ahora)\n    return df","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.699056Z","iopub.execute_input":"2024-01-17T17:34:03.69956Z","iopub.status.idle":"2024-01-17T17:34:03.707758Z","shell.execute_reply.started":"2024-01-17T17:34:03.699518Z","shell.execute_reply":"2024-01-17T17:34:03.706498Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"# Creamos un CSV con los datos desde la BBDD\ndef select_noticias(sql_query):\n    engine = bbdd_conn('cryptosentimiento')\n    df = pd.read_sql_query(sql_query, engine)\n    return df","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.709632Z","iopub.execute_input":"2024-01-17T17:34:03.710355Z","iopub.status.idle":"2024-01-17T17:34:03.718448Z","shell.execute_reply.started":"2024-01-17T17:34:03.710315Z","shell.execute_reply":"2024-01-17T17:34:03.717335Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"markdown","source":"## Análisis exploratorio de datos","metadata":{}},{"cell_type":"code","source":"def basic_eda(df):\n    # 4. Contar el número de duplicados en las columnas 'title' y 'url'\n    duplicados_title = df.duplicated(subset=['title']).sum()\n    duplicados_url = df.duplicated(subset=['url']).sum()\n    # Imprimir el resultado\n    print(\"Número de duplicados en la columna 'title':\", duplicados_title)\n    print(\"Número de duplicados en la columna 'url':\", duplicados_url)\n    # Verificar si hay valores nulos en el DataFrame\n    valores_nulos = df.isnull().sum()\n    # Imprimir el resultado\n    print(\"Valores nulos por columna:\")\n    print(valores_nulos)","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.720029Z","iopub.execute_input":"2024-01-17T17:34:03.720695Z","iopub.status.idle":"2024-01-17T17:34:03.729527Z","shell.execute_reply.started":"2024-01-17T17:34:03.720654Z","shell.execute_reply":"2024-01-17T17:34:03.728367Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"# Calculo del minimo, la media, promedio y maximo de las columnas relevance y score\ndef estadisticas(df):\n    # Calcular estadísticas para la columna 'relevance'\n    min_relevance = df['relevance'].min()\n    mean_relevance = df['relevance'].mean()\n    median_relevance = df['relevance'].median()\n    max_relevance = df['relevance'].max()\n    # Imprimir el resultado\n    print(\"Estadísticas para la columna 'relevance':\")\n    print(\"Mínimo:\", min_relevance)\n    print(\"Media:\", mean_relevance)\n    print(\"Mediana:\", median_relevance)\n    print(\"Máximo:\", max_relevance)\n    # Calcular estadísticas para la columna 'score'\n    min_score = df['score'].min()\n    mean_score = df['score'].mean()\n    median_score = df['score'].median()\n    max_score = df['score'].max()\n    # Imprimir el resultado\n    print(\"\\nEstadísticas para la columna 'score':\")\n    print(\"Mínimo:\", min_score)\n    print(\"Media:\", mean_score)\n    print(\"Mediana:\", median_score)\n    print(\"Máximo:\", max_score)","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.73115Z","iopub.execute_input":"2024-01-17T17:34:03.731828Z","iopub.status.idle":"2024-01-17T17:34:03.745547Z","shell.execute_reply.started":"2024-01-17T17:34:03.73179Z","shell.execute_reply":"2024-01-17T17:34:03.74412Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"def nube_palabras(df):\n    text = ' '.join(df['summary'])\n    # Crear la nube de palabras\n    wordcloud = WordCloud(width=800, height=400, max_font_size=100, background_color='white').generate(text)\n    # Mostrar la nube de palabras\n    plt.figure(figsize=(10, 8))\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis('off')\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.747327Z","iopub.execute_input":"2024-01-17T17:34:03.748158Z","iopub.status.idle":"2024-01-17T17:34:03.757641Z","shell.execute_reply.started":"2024-01-17T17:34:03.748099Z","shell.execute_reply":"2024-01-17T17:34:03.756281Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"custom_ranges_relevance = [0, 0.2, 0.5, 0.8, 1.0]\ndef graficar_relevancia(df):\n    # Categoriza la columna 'relevance' en los rangos definidos\n    df['relevance_category'] = pd.cut(df['relevance'], bins=custom_ranges_relevance, labels=['0 a 0.2', '0.2 a 0.5', '0.5 a 0.8', '0.8 a 1.0'], include_lowest=True)\n    # Cuenta la frecuencia de cada categoría\n    category_counts_relevance = df['relevance_category'].value_counts()\n    # Crea un gráfico de barras\n    plt.figure(figsize=(10, 6))\n    category_counts_relevance.plot(kind='bar', color='blue', alpha=0.7)\n    plt.xlabel('Rangos de Relevance')\n    plt.ylabel('Recuento')\n    plt.title('Distribución de Relevance en Rangos Personalizados')\n    plt.xticks(rotation=0)\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.75947Z","iopub.execute_input":"2024-01-17T17:34:03.760317Z","iopub.status.idle":"2024-01-17T17:34:03.769864Z","shell.execute_reply.started":"2024-01-17T17:34:03.760274Z","shell.execute_reply":"2024-01-17T17:34:03.768721Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"custom_ranges_score = [-1.0, -0.35, -0.15, 0.15, 0.35, 1.0]\ndef graficar_score(df):\n    df['score_category'] = pd.cut(df['score'], bins=custom_ranges_score, labels=['-1.0 a -0.35', '-0.35 a -0.15', '-0.15 a 0.15', '0.15 a 0.35', '0.35 a 1.0'], include_lowest=True)\n    # Cuenta la frecuencia de cada categoría\n    category_counts_score = df['score_category'].value_counts()\n    # Crea un gráfico de barras\n    plt.figure(figsize=(10, 6))\n    category_counts_score.plot(kind='bar', color='blue', alpha=0.7)\n    plt.xlabel('Rangos de Score')\n    plt.ylabel('Recuento')\n    plt.title('Distribución de Score en Rangos Personalizados')\n    plt.xticks(rotation=0)\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.771369Z","iopub.execute_input":"2024-01-17T17:34:03.771819Z","iopub.status.idle":"2024-01-17T17:34:03.788802Z","shell.execute_reply.started":"2024-01-17T17:34:03.771779Z","shell.execute_reply":"2024-01-17T17:34:03.78761Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"def graficar_rangos_relevance(df):\n    # Categoriza la columna 'relevance' en los rangos definidos\n    df['relevance_category'] = pd.cut(df['relevance'], bins=custom_ranges_relevance, labels=['0 a 0.2', '0.2 a 0.5', '0.5 a 0.8', '0.8 a 1.0'], include_lowest=True)\n    # Crea un gráfico de barras\n    plt.figure(figsize=(10, 6))\n    df.groupby(['relevance_category', 'label']).size().unstack().plot(kind='bar', stacked=True, alpha=0.7)\n    plt.xlabel('Rangos de Relevance')\n    plt.ylabel('Recuento')\n    plt.title('Distribución de Label en Rangos de Relevance')\n    plt.xticks(rotation=45, ha='right')\n    plt.legend(title='Label')\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.790937Z","iopub.execute_input":"2024-01-17T17:34:03.791747Z","iopub.status.idle":"2024-01-17T17:34:03.805207Z","shell.execute_reply.started":"2024-01-17T17:34:03.791705Z","shell.execute_reply":"2024-01-17T17:34:03.804096Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"def graficar_rangos_score(df):\n    # Categoriza la columna 'score' en los rangos definidos\n    df['score_category'] = pd.cut(df['score'], bins=custom_ranges_score, labels=['-1.0 a -0.35', '-0.35 a -0.15', '-0.15 a 0.15', '0.15 a 0.35', '0.35 a 1.0'], include_lowest=True)\n    # Crea un gráfico de barras\n    plt.figure(figsize=(10, 6))\n    df.groupby(['score_category', 'label']).size().unstack().plot(kind='bar', stacked=True, alpha=0.7)\n    plt.xlabel('Rangos de Score')\n    plt.ylabel('Recuento')\n    plt.title('Distribución de Label en Rangos de Score')\n    plt.xticks(rotation=45, ha='right')\n    plt.legend(title='Label')\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.807291Z","iopub.execute_input":"2024-01-17T17:34:03.808257Z","iopub.status.idle":"2024-01-17T17:34:03.819337Z","shell.execute_reply.started":"2024-01-17T17:34:03.808212Z","shell.execute_reply":"2024-01-17T17:34:03.818222Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"def graficar_labels(df):\n    # 3. Contar las filas para cada una de las clases de la columna 'label' y hacer una gráfica\n    plt.figure(figsize=(10, 6))\n    df['label'].value_counts().plot(kind='bar', title='Conteo por clase de label')\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.82174Z","iopub.execute_input":"2024-01-17T17:34:03.822119Z","iopub.status.idle":"2024-01-17T17:34:03.830694Z","shell.execute_reply.started":"2024-01-17T17:34:03.822075Z","shell.execute_reply":"2024-01-17T17:34:03.829213Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"def time_to_seconds(time):\n    return time.hour * 3600 + time.minute * 60 + time.second\n\ndef bloque_hora(df):\n    # Asegura que la columna 'hora' está en formato de tiempo.\n    if not pd.api.types.is_datetime64_any_dtype(df['hora']):\n        df['hora'] = pd.to_datetime(df['hora'], format='%H:%M:%S').dt.time\n\n    # Convertimos los tiempos a segundos para categorizar\n    bloques_horarios_en_segundos = [\n        time_to_seconds(pd.to_datetime(t, format='%H:%M:%S').time()) for t in ['00:00:00', '06:00:00', '12:00:00', '18:00:00', '23:59:59']\n    ]\n\n    # Usamos 'pd.cut' para categorizar las horas\n    df['bloque_hora'] = pd.cut(\n        df['hora'].apply(time_to_seconds),\n        bins=bloques_horarios_en_segundos,\n        labels=[\"Madrugada\", 'Mañana', 'Tarde', 'Noche'],\n        right=False,\n        include_lowest=True\n    )\n\n    return df","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.832513Z","iopub.execute_input":"2024-01-17T17:34:03.83298Z","iopub.status.idle":"2024-01-17T17:34:03.84449Z","shell.execute_reply.started":"2024-01-17T17:34:03.832945Z","shell.execute_reply":"2024-01-17T17:34:03.843103Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"def distribuciones_fecha_hora(df):\n    # Crea un subplot con 2 filas y 1 columna\n    fig = make_subplots(rows=2, cols=1, subplot_titles=('Distribución de Fechas', 'Distribución de la Hora'))\n    # Histograma de la distribución de fechas\n    fig_fecha = go.Histogram(x=df[\"fecha\"])\n    fig.add_trace(fig_fecha, row=1, col=1)\n    # Histograma de la distribución de la hora\n    fig_hora = go.Histogram(x=df[\"hora\"])\n    fig.add_trace(fig_hora, row=2, col=1)\n    # Ajustando el layout del subplot\n    fig.update_layout(title_text=\"Distribuciones de Fecha y Hora\", height=600, showlegend=False)\n    fig.show()","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.846877Z","iopub.execute_input":"2024-01-17T17:34:03.848159Z","iopub.status.idle":"2024-01-17T17:34:03.85925Z","shell.execute_reply.started":"2024-01-17T17:34:03.848093Z","shell.execute_reply":"2024-01-17T17:34:03.858307Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"def distribuciones_fecha_hora_label(df):\n    # Define las trazas de los histogramas\n    fig_hora = px.histogram(df, x='hora', color='label').data[0]\n    fig_fecha = px.histogram(df, x='fecha', color='label').data[0]\n    # Crea un figura con subplots (2 filas, 1 columna)\n    fig = make_subplots(rows=2, cols=1, subplot_titles=('Distribución de la Hora con Colores según la Etiqueta', 'Distribución de la fecha con Colores según la Etiqueta'))\n    # Añade el histograma de 'hora' al primer subplot\n    fig.add_trace(fig_hora, row=1, col=1)\n    # Añade el histograma de 'fecha' al segundo subplot\n    fig.add_trace(fig_fecha, row=2, col=1)\n    # Actualiza el layout para ajustar el tamaño y mostrar la leyenda\n    fig.update_layout(height=700, showlegend=True)\n    # Muestra la figura completa\n    fig.show()","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.860721Z","iopub.execute_input":"2024-01-17T17:34:03.861832Z","iopub.status.idle":"2024-01-17T17:34:03.871746Z","shell.execute_reply.started":"2024-01-17T17:34:03.861787Z","shell.execute_reply":"2024-01-17T17:34:03.870433Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"def distribuciones_bloques_horas_label(df):\n    # Añadir columna bloque_hora si no existe\n    if 'bloque_hora' not in df.columns:\n        df = bloque_hora(df)\n    \n    # Define las trazas de los histogramas\n    fig_bloque_horas = px.histogram(df, x='bloque_hora', title='Distribución de Bloques de Horas')\n    fig_bloque_horas.update_xaxes(categoryorder='array', categoryarray=['Madrugada', 'Mañana', 'Tarde', 'Noche'])\n\n    fig_bloque_horas_colores = px.histogram(df, x='bloque_hora', color='label', title='Distribución de Bloques de Horas con Colores')\n    fig_bloque_horas_colores.update_xaxes(categoryorder='array', categoryarray=['Madrugada', 'Mañana', 'Tarde', 'Noche'])\n\n    # Crea una figura con subplots (2 filas, 1 columna)\n    fig = make_subplots(rows=2, cols=1, subplot_titles=('Distribución de Bloques de Horas', 'Distribución de Bloques de Horas con Colores'))\n\n    # Añadir la primera traza al primer subplot\n    for trace in fig_bloque_horas.data:\n        fig.add_trace(trace, row=1, col=1)\n\n    # Añadir la segunda traza al segundo subplot\n    for trace in fig_bloque_horas_colores.data:\n        fig.add_trace(trace, row=2, col=1)\n\n    # Aquí actualizamos la leyenda de la figura, no de las trazas individuales\n    fig.update_layout(\n        height=700,       # altura de la figura\n        showlegend=True  # mostrar leyenda\n    )\n\n    # Muestra la figura completa\n    fig.show()","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.873551Z","iopub.execute_input":"2024-01-17T17:34:03.87423Z","iopub.status.idle":"2024-01-17T17:34:03.889503Z","shell.execute_reply.started":"2024-01-17T17:34:03.874191Z","shell.execute_reply":"2024-01-17T17:34:03.888411Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"def scatter_bloques_horas_relevance_score(df):\n    # Añadir columna bloque_hora si no existe\n    if 'bloque_hora' not in df.columns:\n        df = bloque_hora(df)\n    \n    # Crea la primera gráfica de dispersión\n    fig_scatter = px.scatter(df, x='relevance', y='score', title='Scatter Plot de Relevance vs Score')\n\n    # Reducir la muestra al 30% (ajusta según tus necesidades)\n    df_muestra_reducida = df.sample(frac=0.3, random_state=42)\n\n    # Crea la segunda gráfica de dispersión con color mapeado al bloque de hora\n    fig_scatter_color = px.scatter(df_muestra_reducida, x='relevance', y='score', color='bloque_hora', title='Scatter Plot de Relevance vs Score con Colores por Bloque de Hora')\n\n    # Crea la figura con subplots\n    fig = make_subplots(rows=2, cols=1, subplot_titles=('Scatter Plot de Relevance vs Score', 'Scatter Plot de Relevance vs Score con Colores por Bloque de Hora'))\n\n    # Añade la primera gráfica de dispersión al primer subplot\n    for trace in fig_scatter.data:\n        fig.add_trace(trace, row=1, col=1)\n\n    # Añade la segunda gráfica de dispersión al segundo subplot\n    for trace in fig_scatter_color.data:\n        fig.add_trace(trace, row=2, col=1)\n\n    # Actualiza el layout para mostrar los títulos y ajustar otros aspectos visuales\n    fig.update_layout(title_text=\"Scatter Plots de Relevance vs Score\", height=700)\n\n    # Muestra la figura\n    fig.show()","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.891125Z","iopub.execute_input":"2024-01-17T17:34:03.891807Z","iopub.status.idle":"2024-01-17T17:34:03.905394Z","shell.execute_reply.started":"2024-01-17T17:34:03.891766Z","shell.execute_reply":"2024-01-17T17:34:03.904304Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"markdown","source":"## Procesamiento de datos","metadata":{}},{"cell_type":"code","source":"def undersampling(df):\n    # Calculamos la cantidad promedio de las demás categorías que no son 'neutral'\n    counts = df[df['label'] != 'Neutral']['label'].value_counts()\n    average_count = int(counts.mean())\n    # Realizamos el undersampling\n    df_neutral_undersampled = df[df['label'] == 'Neutral'].sample(n=average_count)\n    df_somewhat_Bullish_undersampled = df[df['label'] == 'Somewhat-Bullish'].sample(n=average_count)\n    # Mantenemos las demás categorías como están\n    df_filtrado = df[(df['label'] != 'Neutral') & (df['label'] != 'Somewhat-Bullish')]\n    # Combinamos el dataframe de noticias neutrales undersampled con las demás\n    df_balanced = pd.concat([df_neutral_undersampled, df_somewhat_Bullish_undersampled, df_filtrado])\n    # return\n    return df_balanced","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.907664Z","iopub.execute_input":"2024-01-17T17:34:03.908395Z","iopub.status.idle":"2024-01-17T17:34:03.922397Z","shell.execute_reply.started":"2024-01-17T17:34:03.908354Z","shell.execute_reply":"2024-01-17T17:34:03.921389Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"def remove_stopwords(text):\n    english_stopwords = set(stopwords.words('english'))\n    words = text.split()\n    clean_words = [word for word in words if word.lower() not in english_stopwords]\n    return \" \".join(clean_words)","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.932288Z","iopub.execute_input":"2024-01-17T17:34:03.933553Z","iopub.status.idle":"2024-01-17T17:34:03.943643Z","shell.execute_reply.started":"2024-01-17T17:34:03.933504Z","shell.execute_reply":"2024-01-17T17:34:03.942026Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"def lemmatizar_texto(text):\n    # Tokenizar\n    tokens = word_tokenize(text)\n    # taggin para lematizar\n    tokens_pos = nltk.pos_tag(tokens)\n    # tagging a wordnet\n    def tagging_wordnet(tag):\n        if tag.startswith('J'):\n            return nltk.corpus.wordnet.ADJ\n        elif tag.startswith('V'):\n            return nltk.corpus.wordnet.VERB\n        elif tag.startswith('N'):\n            return nltk.corpus.wordnet.NOUN\n        elif tag.startswith('R'):\n            return nltk.corpus.wordnet.ADV\n        else:\n            return nltk.corpus.wordnet.NOUN\n    lemmatizer = WordNetLemmatizer()\n    lemmas = [lemmatizer.lemmatize(token, pos=tagging_wordnet(pos_tag)) for token, pos_tag in tokens_pos]\n    return ' '.join(lemmas)","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.945518Z","iopub.execute_input":"2024-01-17T17:34:03.946359Z","iopub.status.idle":"2024-01-17T17:34:03.9569Z","shell.execute_reply.started":"2024-01-17T17:34:03.946314Z","shell.execute_reply":"2024-01-17T17:34:03.955569Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"def tokenizador(df):\n    tokenizer = Tokenizer()\n    tokenizer.fit_on_texts(df['text'])\n    return tokenizer","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.958737Z","iopub.execute_input":"2024-01-17T17:34:03.959619Z","iopub.status.idle":"2024-01-17T17:34:03.969282Z","shell.execute_reply.started":"2024-01-17T17:34:03.959578Z","shell.execute_reply":"2024-01-17T17:34:03.967818Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"def vectorizador(df):\n    tfidf_vect = TfidfVectorizer()\n    tfidf_vect.fit(df['text'])\n    return tfidf_vect","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.971075Z","iopub.execute_input":"2024-01-17T17:34:03.97199Z","iopub.status.idle":"2024-01-17T17:34:03.981346Z","shell.execute_reply.started":"2024-01-17T17:34:03.971949Z","shell.execute_reply":"2024-01-17T17:34:03.980198Z"},"trusted":true},"execution_count":31,"outputs":[]},{"cell_type":"code","source":"def labelizar(df):\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit(df['label'])\n    return label_encoder","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.983154Z","iopub.execute_input":"2024-01-17T17:34:03.984037Z","iopub.status.idle":"2024-01-17T17:34:03.993239Z","shell.execute_reply.started":"2024-01-17T17:34:03.983997Z","shell.execute_reply":"2024-01-17T17:34:03.992115Z"},"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"code","source":"def limpiar_stopwords_lematizar(df):\n    # Juntar título y resumen de la noticia\n    df['text'] = df['summary']\n    # Limpiar texto\n    df['text'] = df['text'].apply(clean_text)\n    # Eliminación de stopwords\n    df['text'] = df['text'].apply(remove_stopwords)\n    # Lematizar texto\n    df['text'] = df['text'].apply(lemmatizar_texto)\n    # retunr dataframe\n    return df","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:03.995264Z","iopub.execute_input":"2024-01-17T17:34:03.996211Z","iopub.status.idle":"2024-01-17T17:34:04.010058Z","shell.execute_reply.started":"2024-01-17T17:34:03.996163Z","shell.execute_reply":"2024-01-17T17:34:04.008193Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"def pre_procesamiento_fit_ml(df):\n    # Undersampling\n    df = undersampling(df) \n    # stopwords y lematizar\n    df = limpiar_stopwords_lematizar(df)\n    # X Vectorización\n    tfidf_vect = vectorizador(df)\n    tfidf_matrix = tfidf_vect.transform(df['text'])\n    # Creación de características (Análisis de sentimiento)\n    sentiment_scores = df['text'].apply(lambda x: TextBlob(x).sentiment.polarity)\n    # Convierte la Serie de pandas a un arreglo de numpy (matriz 2D con una sola columna)\n    sentiment_scores = sentiment_scores.to_numpy().reshape(-1, 1)\n    # Juntar la matriz vectorizada y el análisis de sentimiento\n    X = hstack([tfidf_matrix, sentiment_scores])\n    # y categorización\n    label_encoder = labelizar(df)\n    y = label_encoder.transform(df['label'])\n    # Train y test\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, stratify=y)\n    # retornar X e y\n    return X_train, X_test, y_train, y_test, tfidf_vect, label_encoder","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:04.01156Z","iopub.execute_input":"2024-01-17T17:34:04.012011Z","iopub.status.idle":"2024-01-17T17:34:04.022424Z","shell.execute_reply.started":"2024-01-17T17:34:04.01197Z","shell.execute_reply":"2024-01-17T17:34:04.021351Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"code","source":"def pre_procesamiento_fit_dl(df):\n     # Undersampling\n     df = undersampling(df)\n     # stopwords y lematizar\n     df = limpiar_stopwords_lematizar(df)\n     # Tokenizar y convertir a secuencias\n     tokenizer = tokenizador(df)\n     sequences = tokenizer.texts_to_sequences(df['text'])\n     # Calcular la longitud máxima de la secuencia\n     sequence_lengths = [len(seq) for seq in sequences]\n     max_sequence_length = int(np.percentile(sequence_lengths, 95))\n     # Crear matriz X\n     X = pad_sequences(sequences, maxlen=max_sequence_length)\n     # Prepara y para configurar el modelo de regresión (score)\n     y = df['score']\n     # Train y test\n     X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\n     # retornar todo\n     return X_train, X_test, y_train, y_test, tokenizer, max_sequence_length","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:04.024246Z","iopub.execute_input":"2024-01-17T17:34:04.025018Z","iopub.status.idle":"2024-01-17T17:34:04.036539Z","shell.execute_reply.started":"2024-01-17T17:34:04.024976Z","shell.execute_reply":"2024-01-17T17:34:04.035327Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"markdown","source":"## Creación de modelos ML y DL","metadata":{}},{"cell_type":"code","source":"def modelo_gradient_boosting(param_dist):\n    # Definir el modelo Gradient Boosting\n    gradient_boost_model = GradientBoostingClassifier()\n    # Realizar la búsqueda aleatoria de hiperparámetros\n    random_search = RandomizedSearchCV(gradient_boost_model, param_dist, n_iter=10, cv=3, n_jobs=-1)\n    #Return randeom model\n    return random_search","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:04.038194Z","iopub.execute_input":"2024-01-17T17:34:04.039115Z","iopub.status.idle":"2024-01-17T17:34:04.051765Z","shell.execute_reply.started":"2024-01-17T17:34:04.039075Z","shell.execute_reply":"2024-01-17T17:34:04.050663Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"code","source":"def modelo_AdaBoostClassifier(param_dist):\n    # Definir el modelo AdaBoost\n    adaboost_model = AdaBoostClassifier()\n    # Realizar la búsqueda aleatoria de hiperparámetros\n    random_search = RandomizedSearchCV(adaboost_model, param_dist, n_iter=10, cv=3, n_jobs=-1)\n    return random_search","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:04.053377Z","iopub.execute_input":"2024-01-17T17:34:04.054039Z","iopub.status.idle":"2024-01-17T17:34:04.063897Z","shell.execute_reply.started":"2024-01-17T17:34:04.053992Z","shell.execute_reply":"2024-01-17T17:34:04.062837Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"def modelo_lstm_conv_atencion(tokenizer, max_sequence_length):\n    vocab_size = len(tokenizer.word_index) + 1\n    # Entradas\n    inputs = Input(shape=(max_sequence_length,))\n    # Capa de embedding\n    x = Embedding(input_dim=vocab_size, output_dim=256)(inputs)\n    # Primera capa convolucional y max pooling\n    x = Conv1D(filters=128, kernel_size=3, activation='relu')(x)\n    x = MaxPooling1D(pool_size=2)(x)\n    # LSTM bidireccional con return_sequences=True para conectar a la capa de atención\n    lstm_out = Bidirectional(LSTM(units=128, dropout=0.2, recurrent_dropout=0.2, return_sequences=True))(x)\n    # Capa de atención\n    attention_out = Attention()([lstm_out, lstm_out])\n    # Otra LSTM bidireccional\n    x = Bidirectional(LSTM(units=64, dropout=0.3, recurrent_dropout=0.3))(attention_out)\n    # Capas densas con regularizadores y dropout para prevenir el sobreajuste\n    x = Dense(64, activation='relu', kernel_regularizer=l2(0.01))(x)\n    x = Dropout(0.5)(x)\n    # Capa de salida tangencial\n    outputs = Dense(1, activation='tanh')(x)\n    # Crear el modelo\n    model = Model(inputs=inputs, outputs=outputs)\n    # Compilar el modelo\n    model.compile(loss='mean_squared_error', optimizer='adam', metrics=['mean_squared_error'])\n    # Callback de entrenamiento\n    callback = EarlyStopping(monitor='val_loss', patience=3, verbose=0, restore_best_weights=True)\n    # Retorna el modelo\n    return model, callback","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:04.065522Z","iopub.execute_input":"2024-01-17T17:34:04.066206Z","iopub.status.idle":"2024-01-17T17:34:04.079952Z","shell.execute_reply.started":"2024-01-17T17:34:04.066166Z","shell.execute_reply":"2024-01-17T17:34:04.07891Z"},"trusted":true},"execution_count":38,"outputs":[]},{"cell_type":"markdown","source":"## Evaluación de los modelos","metadata":{}},{"cell_type":"code","source":"def evaluar_modelo_ml(y_test, y_hat):\n    # Clases\n    clases = ['Bearish', 'Somewhat-Bearish', 'Neutral', 'Somewhat-Bullish', 'Bullish']\n    # Calcular la matriz de confusión\n    cm = confusion_matrix(y_test, y_hat)\n    # Dibujar la matriz de confusión\n    fig, ax = plt.subplots(figsize=(10,10))\n    sns.heatmap(cm, annot=True, fmt='d', ax=ax, cmap=plt.cm.Blues, \n                cbar_kws={'shrink': .3}, linewidths=.1, linecolor='gray')\n    ax.set_xticklabels(clases)\n    ax.set_yticklabels(clases)\n    plt.title('Matriz de Confusión')\n    plt.ylabel('Verdaderos')\n    plt.xlabel('Predicciones')\n    # Rotar las etiquetas si es necesario\n    plt.xticks(rotation=45)\n    plt.yticks(rotation=45)\n    plt.show()\n    # Reporte de clasificación\n    print('Reporte de Clasificación:')\n    print(classification_report(y_test, y_hat, target_names=clases))\n    # Métricas adicionales\n    print(\"Jaccard Index:\", jaccard_score(y_test, y_hat, average='macro'))\n    print(\"Accuracy:\", accuracy_score(y_test, y_hat))\n    print(\"Precisión:\", precision_score(y_test, y_hat, average='macro'))\n    print(\"Sensibilidad:\", recall_score(y_test, y_hat, average='macro'))\n    print(\"F1-score:\", f1_score(y_test, y_hat, average='macro'))","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:04.081589Z","iopub.execute_input":"2024-01-17T17:34:04.082247Z","iopub.status.idle":"2024-01-17T17:34:04.095834Z","shell.execute_reply.started":"2024-01-17T17:34:04.082206Z","shell.execute_reply":"2024-01-17T17:34:04.094768Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"code","source":"def evaluar_modelo_dl(model_lstm, history, X_test, y_test, y_hat):\n    # Evaluar el modelo en el conjunto de test\n    scores = model_lstm.evaluate(X_test, y_test, verbose=0)\n    mse = mean_squared_error(y_test, y_hat)\n    rmse = mse ** 0.5\n    mae = mean_absolute_error(y_test, y_hat)\n    r2 = r2_score(y_test, y_hat)\n    print(f\"Loss: {scores[0]}\")\n    print(f\"Accuracy: {scores[1]}\")\n    print(f\"Mean Squared Error (MSE): {mse}\")\n    print(f\"Root Mean Squared Error (RMSE): {rmse}\")\n    print(f\"Mean Absolute Error (MAE): {mae}\")\n    print(f\"R² Score: {r2}\")\n    # Gráfico para 'loss' y 'val_loss'\n    plt.figure()\n    plt.plot(history.history['loss'], label='Train Loss')\n    plt.plot(history.history['val_loss'], label='Validation Loss')\n    plt.title('Model Loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.legend(loc='upper right')\n    plt.show()\n    # Gráfico de dispersión para los valores reales vs. predicciones\n    plt.figure()\n    sns.scatterplot(x=range(len(y_test)), y=y_test, alpha=0.3, color='green', label='Valores Reales', s=20)\n    sns.scatterplot(x=range(len(y_hat)), y=y_hat, alpha=0.3, color='blue', label='Predicciones', s=20)\n    plt.title('Comparación de valores verdaderos vs. predicciones')\n    plt.xlabel('Index')\n    plt.ylabel('Valor')\n    plt.legend()\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:04.097502Z","iopub.execute_input":"2024-01-17T17:34:04.098561Z","iopub.status.idle":"2024-01-17T17:34:04.113205Z","shell.execute_reply.started":"2024-01-17T17:34:04.098515Z","shell.execute_reply":"2024-01-17T17:34:04.112153Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"markdown","source":"## Webscraping de última noticia","metadata":{}},{"cell_type":"code","source":"HEADERS = {'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}\ndef webscraping_ultima_noticia(fuente):\n    if fuente.lower() == \"cointelegraph\":\n        url_base = \"https://cointelegraph.com\"\n        # Otener la última noticia\n        url_ultimas_noticias = f'{url_base}/tags/bitcoin'\n        response = requests.get(url_ultimas_noticias, headers = HEADERS)\n        soup = BeautifulSoup(response.text, 'html.parser')\n        div_lista = soup.find('div', class_='tag-page__rows').find('div', class_='tag-page__posts-col').find('div', class_='group inline').find('ul', class_='grid gap-5 mb-5 group-[.inline]:block group-[.double-column]:grid-cols-1 sm:group-[.double-column]:grid-cols-2 group-[.main]:grid-cols-1 sm:group-[.main]:grid-cols-2 lg:group-[.main]:grid-cols-3').findAll('li', class_='group-[.inline]:mb-8')\n        link_ultima_noticia = div_lista[0].find('article', class_='post-card-inline').find('a', class_='post-card-inline__figure-link').get('href')\n        # Contenido de la última noticia\n        url_ultima_noticia = f'{url_base}{link_ultima_noticia}'\n        response = requests.get(url_ultima_noticia, headers = HEADERS)\n        soup = BeautifulSoup(response.text, 'html.parser')\n        titulo = soup.find('h1', class_='post__title').text\n        div_contenido =  soup.find('div', class_='post-content relative')\n        parrafos = div_contenido.find_all('p')\n        texto = ' '.join(parrafo.text.strip() for parrafo in parrafos)\n        # se retorna el dataframe\n        return titulo, texto\n    elif fuente.lower() == \"criptonoticias\":\n        url_base = \"https://www.criptonoticias.com/\"\n        # Otener lista de últimas noticias\n        response = requests.get(url_base, headers = HEADERS)\n        soup = BeautifulSoup(response.text, 'html.parser')\n        div_lista = soup.find('div', class_='elementor-column elementor-col-33 elementor-top-column elementor-element elementor-element-4484add0').find_all('article', class_='jeg_post jeg_pl_sm_2 format-standard')\n        url_ultima_noticia = div_lista[0].find('h3', class_='jeg_post_title').find('a', href=True)['href']\n        response = requests.get(url_ultima_noticia, headers = HEADERS)\n        soup = BeautifulSoup(response.text, 'html.parser')\n        titulo = soup.find('div', class_='entry-header').find('h1', class_='jeg_post_title').text\n        div_contenido =  soup.find('div', class_='content-inner')\n        parrafos = div_contenido.find_all('p')\n        texto = ' '.join(parrafo.text.strip() for parrafo in parrafos)\n        return titulo, texto","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:04.114824Z","iopub.execute_input":"2024-01-17T17:34:04.115521Z","iopub.status.idle":"2024-01-17T17:34:04.135084Z","shell.execute_reply.started":"2024-01-17T17:34:04.115483Z","shell.execute_reply":"2024-01-17T17:34:04.133833Z"},"trusted":true},"execution_count":41,"outputs":[]},{"cell_type":"code","source":"def resumen_chatgpt(texto):\n    api_key = get_read_file(\"/kaggle/input/d/antoniojess/openai-apikey/\", \"openai_apikey.txt\")\n    # Define prompt\n    prompt_template = \"\"\"\"Write a english summary of no more than three lines for this news, \n    capturing the overall sentiment towards cryptocurrencies.\":\n    \"{text}\"\n    CONCISE SUMMARY:\"\"\"\n    prompt = PromptTemplate.from_template(prompt_template)\n    # Define LLM chain\n    llm = ChatOpenAI(temperature=0, openai_api_key=api_key, model_name=\"gpt-3.5-turbo-16k\")\n    llm_chain = LLMChain(llm=llm, prompt=prompt)\n    # Define StuffDocumentsChain\n    stuff_chain = StuffDocumentsChain(llm_chain=llm_chain, document_variable_name=\"text\")\n    text_splitter = CharacterTextSplitter(chunk_size=500, chunk_overlap=100)\n    docs = [Document(page_content=x) for x in text_splitter.split_text(texto)]\n    # Retorna el resumen\n    return(stuff_chain.run(docs))","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:04.136692Z","iopub.execute_input":"2024-01-17T17:34:04.137176Z","iopub.status.idle":"2024-01-17T17:34:04.149634Z","shell.execute_reply.started":"2024-01-17T17:34:04.137106Z","shell.execute_reply":"2024-01-17T17:34:04.148772Z"},"trusted":true},"execution_count":42,"outputs":[]},{"cell_type":"code","source":"def resumen_ultima_noticia(fuente):\n    # Noticia en castellano desde la fuente\n    titulo, texto = webscraping_ultima_noticia(fuente)\n    resumen = resumen_chatgpt(clean_text(texto))\n    # Procesar texto de la noticia\n    resumen_limpio = clean_text(resumen)\n    resumen_sin_stopwords = remove_stopwords(resumen_limpio)\n    resumen_lematizado = lemmatizar_texto(resumen_sin_stopwords)\n    # return\n    return titulo, resumen, resumen_lematizado","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:04.150974Z","iopub.execute_input":"2024-01-17T17:34:04.152074Z","iopub.status.idle":"2024-01-17T17:34:04.164732Z","shell.execute_reply.started":"2024-01-17T17:34:04.15202Z","shell.execute_reply":"2024-01-17T17:34:04.16369Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"markdown","source":"## Puesta en producción","metadata":{}},{"cell_type":"code","source":"def interpret_lstm_prediction(prediction):\n    if prediction <= -0.35:\n        return 'Bearish'\n    elif -0.35 < prediction <= -0.15:\n        return 'Somewhat-Bearish'\n    elif -0.15 < prediction < 0.15:\n        return 'Neutral'\n    elif 0.15 <= prediction < 0.35:\n        return 'Somewhat-Bullish'\n    else:\n        return 'Bullish'","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:04.167271Z","iopub.execute_input":"2024-01-17T17:34:04.168197Z","iopub.status.idle":"2024-01-17T17:34:04.175329Z","shell.execute_reply.started":"2024-01-17T17:34:04.168157Z","shell.execute_reply":"2024-01-17T17:34:04.17439Z"},"trusted":true},"execution_count":44,"outputs":[]},{"cell_type":"code","source":"def puesta_produccion(model_lstm, tokenizer, max_sequence_length, modelo_gradientboost, modelo_adaboost, tfidf_vect, label_encoder, titulo, resumen, resumen_lematizado):\n    # Modelo LSTM en funcionamiento\n    resumen_tokenizado = tokenizer.texts_to_sequences([resumen_lematizado])\n    resumen_padeado = pad_sequences(resumen_tokenizado, maxlen=max_sequence_length)\n    y_hat_lstm_produccion = model_lstm.predict(resumen_padeado)\n    # Vectorizar resumen\n    resumen_vectorizado = tfidf_vect.transform([resumen_lematizado])\n    # Añadir análisis de sentimiento\n    sentiment_score = TextBlob(resumen_lematizado).sentiment.polarity\n    sentiment_score_array = np.array([sentiment_score]).reshape(-1, 1)\n    # Combinar características TF-IDF y sentimiento\n    resumen_vectorizado_con_sentimiento = hstack([resumen_vectorizado, sentiment_score_array])\n    # Modelo GradientBoost con predicción\n    y_hat_gradient_boost_produccion = modelo_gradientboost.predict(resumen_vectorizado_con_sentimiento)\n    # Modelo AdaBoost con predicción\n    y_hat_adaboost_produccion = modelo_adaboost.predict(resumen_vectorizado_con_sentimiento)\n    # Mapeando las etiquetas codificadas de vuelta a las etiquetas originales\n    gradientboost_sentiment_score = label_encoder.inverse_transform([y_hat_gradient_boost_produccion[0]])[0]\n    adaboost_sentiment_score = label_encoder.inverse_transform([y_hat_adaboost_produccion[0]])[0]\n    # Interpretación de la predicción LSTM\n    lstm_prediction = y_hat_lstm_produccion[0][0]\n    lstm_sentiment_score = interpret_lstm_prediction(lstm_prediction)\n    # Crear un DataFrame que contenga todas las combinaciones posibles de modelos y sentimientos\n    labels = ['Bearish', 'Somewhat-Bearish', 'Neutral', 'Somewhat-Bullish', 'Bullish']\n    all_combinations = pd.DataFrame({\n        'Model': ['LSTM'] * len(labels) + ['GradientBoost'] * len(labels) + ['AdaBoost'] * len(labels),\n        'Sentiment': labels * 3\n    })\n    # Calcular las predicciones\n    predictions = [lstm_sentiment_score, gradientboost_sentiment_score, adaboost_sentiment_score]\n    # Visualización con stripplot\n    plt.figure(figsize=(10, 6))\n    sns.stripplot(x='Model', y='Sentiment', data=all_combinations, color='white', size=10)\n    sns.stripplot(x='Model', y='Sentiment', data=pd.DataFrame({\n        'Model': ['LSTM', 'GradientBoost', 'AdaBoost'],\n        'Sentiment': predictions\n    }), jitter=False, size=10)\n    plt.title(titulo)\n    plt.xlabel('Modelo')\n    plt.ylabel('Sentimiento Predicho')\n    # Invierte el eje y\n    plt.gca().invert_yaxis()\n    # Coloca el resumen debajo del gráfico\n    plt.figtext(0.5, -0.1, f\"Resumen: {resumen}\", wrap=True, horizontalalignment='center', fontsize=10)\n    # Ajustar el layout para hacer espacio para el resumen\n    plt.subplots_adjust(bottom=0.3)\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:04.177079Z","iopub.execute_input":"2024-01-17T17:34:04.177784Z","iopub.status.idle":"2024-01-17T17:34:04.197417Z","shell.execute_reply.started":"2024-01-17T17:34:04.177745Z","shell.execute_reply":"2024-01-17T17:34:04.196325Z"},"trusted":true},"execution_count":45,"outputs":[]},{"cell_type":"markdown","source":"# Ejecución de funciones","metadata":{}},{"cell_type":"markdown","source":"## Creación de la BBDD","metadata":{}},{"cell_type":"code","source":"# Crear BBDD\n#crear_bbdd()\n# Crear tabla\n#crear_tabla()","metadata":{"execution":{"iopub.status.busy":"2024-01-17T18:01:48.222845Z","iopub.execute_input":"2024-01-17T18:01:48.223327Z","iopub.status.idle":"2024-01-17T18:01:48.228528Z","shell.execute_reply.started":"2024-01-17T18:01:48.223291Z","shell.execute_reply":"2024-01-17T18:01:48.227238Z"},"trusted":true},"execution_count":76,"outputs":[]},{"cell_type":"markdown","source":"## Check por noticias nuevas","metadata":{}},{"cell_type":"code","source":"# Chequeamos por noticias nuevas desde la última fecha en la BBDD\n#df = check_noticias()\n# Si hay noticias nuevas se insertan en la BBDD\n#if df.shape[0] > 0:\n#        rows_inserted = insertar_nuevas_noticias(df)\n#print(f\"Se han insertado {rows_inserted} noticias nuevas\")","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:53:13.923837Z","iopub.execute_input":"2024-01-17T17:53:13.924271Z","iopub.status.idle":"2024-01-17T17:53:13.931075Z","shell.execute_reply.started":"2024-01-17T17:53:13.924238Z","shell.execute_reply":"2024-01-17T17:53:13.928697Z"},"trusted":true},"execution_count":63,"outputs":[]},{"cell_type":"markdown","source":"## Noticias a DataFrame","metadata":{}},{"cell_type":"code","source":"# Desde la BBDD\n#df = select_noticias(sql_query = 'SELECT * FROM btc;')\n# Crear CSV\n#df.to_csv('btc_news.csv', index=False)\n# Formatear df\n#df['fecha'] = pd.to_datetime(df['fecha'], format='%Y-%m-%d').dt.time\n#df['hora'] = pd.to_datetime(df['hora'], format='%H:%M:%S').dt.time","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:53:16.66106Z","iopub.execute_input":"2024-01-17T17:53:16.661517Z","iopub.status.idle":"2024-01-17T17:53:16.666936Z","shell.execute_reply.started":"2024-01-17T17:53:16.661484Z","shell.execute_reply":"2024-01-17T17:53:16.665711Z"},"trusted":true},"execution_count":64,"outputs":[]},{"cell_type":"code","source":"# Desde CSV\ndf = pd.read_csv('/kaggle/input/bitcoin-news-sentiment/btc_news.csv')\n# Formatear df\ndf['fecha'] = pd.to_datetime(df['fecha'], format='%Y-%m-%d')\ndf['hora'] = pd.to_datetime(df['hora'], format='%H:%M:%S').dt.time","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:04.236884Z","iopub.execute_input":"2024-01-17T17:34:04.2376Z","iopub.status.idle":"2024-01-17T17:34:05.000628Z","shell.execute_reply.started":"2024-01-17T17:34:04.23756Z","shell.execute_reply":"2024-01-17T17:34:04.999451Z"},"trusted":true},"execution_count":49,"outputs":[]},{"cell_type":"markdown","source":"## Análisis exploratorio","metadata":{}},{"cell_type":"code","source":"# Análisis exploratorio de datos\nbasic_eda(df)\nestadisticas(df)\n#Visualizar nube de palabras\nnube_palabras(df)\n# Gráficos\ngraficar_relevancia(df)\ngraficar_score(df)\ngraficar_rangos_relevance(df)\ngraficar_rangos_score(df)\ngraficar_labels(df)\n# Distribuciones según fecha y hora del día\ndistribuciones_fecha_hora(df)\ndistribuciones_fecha_hora_label(df)\ndistribuciones_bloques_horas_label(df)\nscatter_bloques_horas_relevance_score(df)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Modelos","metadata":{}},{"cell_type":"markdown","source":"### GradientBoost de clasificación","metadata":{}},{"cell_type":"code","source":"# Definir el nombre de archivo del modelo y del vectorizador\nvectorizador_path = 'tfidf_vectorizer.joblib'\nlabel_encoder_path = 'label_encoder.joblib'\nmodelo_path = 'modelo_gradientboost.h5'\n# Verificar si el archivo del modelo existe\nif os.path.exists(modelo_path) and os.path.exists(vectorizador_path) and os.path.exists(label_encoder_path):\n    # Cargar el vectorizador TF-IDF y el Label Encoder desde un archivo\n    tfidf_vect = load('tfidf_vectorizer.joblib')\n    label_encoder = load('label_encoder.joblib')\n    # Carga el modelo existente\n    modelo_gradientboost = load(modelo_path)\nelse:\n    # Preprocesar los datos\n    X_train, X_test, y_train, y_test, tfidf_vect, label_encoder = pre_procesamiento_fit_ml(df)\n    # Guardar el vectorizador TF-IDF y el Label Encoder a un archivo\n    dump(tfidf_vect, 'tfidf_vectorizer.joblib')\n    dump(label_encoder, 'label_encoder.joblib')\n    # Definir los parámetros a ajustar\n    param_dist = {\n        'n_estimators': [50, 100, 200],\n        'learning_rate': [0.01, 0.1, 0.001],\n        'max_depth': [3, 5, 7, 10],\n    }\n    random_search = modelo_gradient_boosting(param_dist)\n    # Entrenar para buscar el mejor modelo\n    random_search.fit(X_train, y_train)\n    # Obtener los mejores parámetros y el mejor modelo\n    best_params = random_search.best_params_\n    modelo_gradientboost = random_search.best_estimator_\n    # Guardar el modelo\n    dump(modelo_gradientboost, modelo_path)\n    # Obtener las predicciones\n    y_hat = modelo_gradientboost.predict(X_test)\n    # Evaluar el modelo\n    evaluar_modelo_ml(y_test, y_hat)","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:19.878272Z","iopub.execute_input":"2024-01-17T17:34:19.878674Z","iopub.status.idle":"2024-01-17T17:34:20.083217Z","shell.execute_reply.started":"2024-01-17T17:34:19.878639Z","shell.execute_reply":"2024-01-17T17:34:20.082015Z"},"trusted":true},"execution_count":51,"outputs":[]},{"cell_type":"markdown","source":"### Adaboost de clasificación","metadata":{}},{"cell_type":"code","source":"# Definir el nombre de archivo del modelo\nmodelo_path = 'modelo_adaboost.h5'\n# Verificar si el archivo del modelo existe\nif os.path.exists(modelo_path) and os.path.exists(vectorizador_path) and os.path.exists(label_encoder_path):\n    # Carga el modelo existente\n    modelo_adaboost = load(modelo_path)\nelse:\n    # Definir los parámetros a ajustar\n    param_dist = {\n        'n_estimators': [50, 100, 200],\n        'learning_rate': [0.1, 0.01, 0.001],\n    }\n    random_search = modelo_AdaBoostClassifier(param_dist)\n    # Entrenar para buscar el mejor modelo\n    random_search.fit(X_train, y_train)\n    # Obtener los mejores parámetros y el mejor modelo\n    best_params = random_search.best_params_\n    modelo_adaboost = random_search.best_estimator_\n    # Guardar el modelo\n    dump(modelo_adaboost, modelo_path)\n    # Evaluar el modelo en el conjunto de prueba\n    y_hat = modelo_adaboost.predict(X_test)\n    # Evaluar el modelo\n    evaluar_modelo_ml(y_test, y_hat)","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:20.08463Z","iopub.execute_input":"2024-01-17T17:34:20.085206Z","iopub.status.idle":"2024-01-17T17:34:20.208864Z","shell.execute_reply.started":"2024-01-17T17:34:20.085121Z","shell.execute_reply":"2024-01-17T17:34:20.207708Z"},"trusted":true},"execution_count":52,"outputs":[]},{"cell_type":"markdown","source":"### Red neuronal de regresión LSTM Convolucional Auto-atención","metadata":{}},{"cell_type":"code","source":"# Definir el nombre de archivo del modelo y del tokenizador\nmodelo_path = 'modelo_lstm.h5'\ntokenizador_path = 'tokenizer.json'\nmax_sequence_length = 'max_sequence_length.txt'\n# Verificar si el archivo del modelo existe\nif os.path.exists(modelo_path) and os.path.exists(tokenizador_path) and os.path.exists(max_sequence_length):\n    # Carga el tokenizador\n    with open('tokenizer.json') as f:\n        data = f.read()\n        tokenizer = tokenizer_from_json(data)\n    # Carga max sequences\n    with open('max_sequence_length.txt', 'r') as f:\n        max_sequence_length = int(f.read())\n    # Carga el modelo existente\n    model_lstm = load_model(modelo_path)\nelse:\n    # Matrices para el modelo LSTM\n    X_train, X_test, y_train, y_test, tokenizer, max_sequence_length = pre_procesamiento_fit_dl(df)\n    # Guardar el tokenizador a un archivo\n    tokenizer_json = tokenizer.to_json()\n    with open('tokenizer.json', 'w', encoding='utf-8') as f:\n        f.write(tokenizer_json)\n    # Guardar max sequence\n    with open('max_sequence_length.txt', 'w') as f:\n        f.write(str(max_sequence_length))\n    # Crea un nuevo modelo llamando a la función modelo_lstm\n    model_lstm, callback = modelo_lstm_conv_atencion(tokenizer, max_sequence_length)\n    # Entrenar el modelo\n    history = model_lstm.fit(X_train, y_train, \n              validation_data=(X_test, y_test), \n              epochs=20, \n              batch_size=128, \n              callbacks=callback,\n              verbose=0)\n    # Guardar el modelo\n    model_lstm.save(modelo_path)\n    # Predecir\n    y_hat = model_lstm.predict(X_test)\n    # Array de las predicciones a una dimensión\n    y_hat = y_hat.ravel()\n    # Evaluación del modelo\n    evaluar_modelo_dl(model_lstm, history, X_test, y_test, y_hat)\n    # Convertir las predicciones continuas en etiquetas de clases usando la función definida\n    y_test_classes = [interpret_lstm_prediction(y) for y in y_test]\n    y_hat_classes = [interpret_lstm_prediction(y) for y in y_hat]\n    # Utilizar el LabelEncoder para transformar las etiquetas de clases a su representación numérica\n    y_test_numerico = label_encoder.transform(y_test_classes)\n    y_hat_numerico = label_encoder.transform(y_hat_classes)\n    # Evaluar clasificación\n    evaluar_modelo_ml(y_test_numerico, y_hat_numerico)","metadata":{"execution":{"iopub.status.busy":"2024-01-17T17:34:20.210854Z","iopub.execute_input":"2024-01-17T17:34:20.211556Z","iopub.status.idle":"2024-01-17T17:34:21.709501Z","shell.execute_reply.started":"2024-01-17T17:34:20.211521Z","shell.execute_reply":"2024-01-17T17:34:21.708214Z"},"trusted":true},"execution_count":53,"outputs":[]},{"cell_type":"markdown","source":"### Resultados de los tres modelos para las últimas noticias sobre Bitcoin","metadata":{}},{"cell_type":"code","source":"## Puesta en producción\nfuentes = ['Cointelegraph', 'Criptonoticias']\nfor fuente in fuentes:\n    titulo, resumen, resumen_lematizado = resumen_ultima_noticia(fuente)\n    print(resumen)\n    puesta_produccion(model_lstm, tokenizer, max_sequence_length, modelo_gradientboost, modelo_adaboost, tfidf_vect, label_encoder, titulo, resumen, resumen_lematizado)","metadata":{"execution":{"iopub.status.busy":"2024-01-17T18:41:15.901925Z","iopub.execute_input":"2024-01-17T18:41:15.902391Z","iopub.status.idle":"2024-01-17T18:41:38.042722Z","shell.execute_reply.started":"2024-01-17T18:41:15.902358Z","shell.execute_reply":"2024-01-17T18:41:38.041323Z"},"trusted":true},"execution_count":80,"outputs":[{"name":"stdout","text":"The debut of the spot bitcoin ETF on January 12 was chaotic, with investors unsure of the inflow and market makers facing issues with liquidation timelines. Despite this, the ETF set a record high in traditional finance with a $466 billion volume. Critics argue that most of the inflows into spot bitcoin ETFs have been paired with outflows from the grayscale GBTC, but there is still a net inflow of $157 million in two days from other ETFs. The question remains whether the exit from GBTC will continue and if the aggregate net inflow is sustainable in the long run.\n1/1 [==============================] - 0s 30ms/step\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"German parliament member Joana Cotar, known for her support of Bitcoin, has announced a Bitcoin in the Bundestag event to educate her colleagues on the benefits of the digital currency. Cotar aims to promote Bitcoin as a stronger monetary policy option and opposes central bank digital currencies (CBDCs) due to concerns about increased surveillance. She believes that Bitcoin offers a more solid alternative to CBDCs.\n1/1 [==============================] - 0s 34ms/step\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}